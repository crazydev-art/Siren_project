name: Check and Deploy Python Files

on:
  push:
    branches:
      - dev

jobs:
  check-python-files:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Find Python Files
        id: find_py_files
        run: |
          PY_FILES=$(find . -type f -name "*.py")
          if [ -z "$PY_FILES" ]; then
            echo "found_py=false" >> $GITHUB_ENV
            echo "No Python files found."
          else
            echo "found_py=true" >> $GITHUB_ENV
            echo "Found Python files:"
            echo "$PY_FILES"
          fi

      - name: Install Dependencies
        if: env.found_py == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install pytest python-dotenv psycopg2 requests

      - name: Create Test Files with Selective Imports
        if: env.found_py == 'true'
        run: |
          find . -type f -name "*.py" | while read file; do
            dir=$(dirname "$file")
            base=$(basename "$file")
            test_file="$dir/test_${base}"
            
            # Copy original to test file
            cp "$file" "$test_file"
            
            # Process imports selectively
            while IFS= read -r line; do
              # Handle 'from ... import' statements
              if [[ "$line" =~ ^([[:space:]]*from[[:space:]]+)([a-zA-Z0-9_]+)([[:space:]]+import.*) ]]; then
                prefix="${BASH_REMATCH[1]}"
                module="${BASH_REMATCH[2]}"
                suffix="${BASH_REMATCH[3]}"
                
                # Check if module exists in project
                if find . -name "${module}.py" -print -quit | grep -q .; then
                  echo "${prefix}test_${module}${suffix}"
                else
                  echo "$line"
                fi

              # Handle 'import ...' statements
              elif [[ "$line" =~ ^([[:space:]]*import[[:space:]]+)([a-zA-Z0-9_]+)([[:space:]]*$) ]]; then
                prefix="${BASH_REMATCH[1]}"
                module="${BASH_REMATCH[2]}"
                suffix="${BASH_REMATCH[3]}"
                
                # Check if module exists in project
                if find . -name "${module}.py" -print -quit | grep -q .; then
                  echo "${prefix}test_${module}${suffix}"
                else
                  echo "$line"
                fi

              # Preserve other lines
              else
                echo "$line"
              fi
            done < "$test_file" > "$test_file.tmp"
            
            mv "$test_file.tmp" "$test_file"
          done

      - name: Run Pytest
        if: env.found_py == 'true'
        run: |
          pytest --maxfail=1 --disable-warnings

      - name: Cleanup Test Files and Imports
        if: always() && env.found_py == 'true'
        run: |
          # Remove test files
          find . -type f -name "test_*.py" -delete
          
          # Revert imports in original files
          find . -type f -name "*.py" | while read file; do
            sed -i -E "s/from test_([a-zA-Z0-9_]+) import/from \1 import/g" "$file"
            sed -i -E "s/import test_([a-zA-Z0-9_]+)/import \1/g" "$file"
          done

      - name: Deploy to Prod and Main
        if: success() && env.found_py == 'true'
        run: |
          git config --global user.email "lionel.matter@outlook.fr"
          git config --global user.name "GitHub Actions"
          
          deploy_to_branch() {
            target_branch=$1
            git checkout $target_branch
            git pull origin $target_branch
            git checkout dev -- .
            git commit -am "Deploy from dev: $(date +'%Y-%m-%d %H:%M:%S')"
            git push origin $target_branch
          }

          deploy_to_branch main
          deploy_to_branch prod

      - name: Log No Python Files
        if: env.found_py == 'false'
        run: echo "No Python files found in this push."