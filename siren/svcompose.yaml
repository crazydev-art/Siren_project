services: # definition of the services
  postgres: # postges section for definition of the config
    image: postgres:latest # which postgres image will be downloaded
    container_name: postgres17_db # name of the container
    networks: # definition of the network 
      - postgre17_network
    environment: # definition of user for the postgreSQL database
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports: # definition of the postgreSQL ports oustide/inside from the container
      - "5432:5432"
    volumes: # declaration of a named volume for postgres data
      - postgres_data:/var/lib/postgresql/data    
        
  pgadmin: # pgadmin section for definition of the config
      image: dpage/pgadmin4 # which pgadmin image will be downloaded
      container_name: pgadmin4_v2 # name of the container
      networks: # definition of the network 
        - postgre17_network
      environment: # definition of the pgadmin user with database information
        PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
        PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
        DATABASE_URL: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres17_db:5432/${POSTGRES_DB}"
      ports: # definition of the pgadmin ports outside/inside from the container
        - "5051:80"
      depends_on: # start when postgres are available
        - postgres
      volumes: # declaration of a named volume for pgadmin data. Needed when backup the database.
        - pgadmin_data:/var/lib/pgadmin
         
  redpdandascript: # Redpanda section for definition of the config
      build: # build container based on the Dockerfile configuration
        context: ./Redpanda # Folder where to execute the Docker file
        dockerfile: Dockerfile
        args: # definition of the environnement variable for the creation of the container
          MYDIR: ${MYDIR}
          REDPANDA: ${REDPANDA}
          FILESIREN: ${FILESIREN}
          IPHOST: ${IPHOST}
      container_name: redpanda_script # name of the container
      networks: # definition of the network 
        - postgre17_network
      depends_on: # start when postgres are available
        - postgres
      ports: # definition of the Redpanda ports outside/inside from the container
        - "4195:4195"
      volumes: # mapping of the volume out-/in-side the container for data exchange
        - /var/run/docker.sock:/var/run/docker.sock 
        - ${MYDIR}:${MYDIR} 
        - ${MYDIR}/Redpanda:${MYDIR}/Redpanda
        - ${MYDIR}/Files_Siren:${MYDIR}/Files_Siren
      environment: # definition for the environnement parameter execution of the container
        - MYDIR=${MYDIR}
        - REDPANDA=${MYDIR}/Redpanda
        - FILESIREN=${MYDIR}/Files_Siren
      command: ./siren_de.sh
      privileged: true # grant permission to write on the local drive
      tty: true # allow to run the container with interactive mode needed for Redpanda. “Docker logs redpanda_script” to see the execution and status

  mongo:
    image: mongo:4.4.18
    container_name: mongo_db
    # restart: always
    ports:
      - '27017:27017'
    networks: # definition of the network 
      - postgre17_network
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongodb:/data/db
      - ./init-db.js:/docker-entrypoint-initdb.d/init-db.js # Mount the initialization script

  mongo-express:
    image: mongo-express
    # restart: always
    ports:
      - 8081:8081
    networks: # definition of the network 
      - postgre17_network
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${ME_CONFIG_MONGODB_ADMINUSERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${ME_CONFIG_MONGODB_ADMINPASSWORD}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017/
      ME_CONFIG_BASICAUTH: false  
    depends_on: # start when mongo are available
        - mongo

volumes: # persistance of the data locally 
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  mongodb:
    driver: local

networks: # network definition
  postgre17_network:
    external: true